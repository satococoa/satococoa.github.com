<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: event | satococoa's blog]]></title>
  <link href="http://satococoa.github.io/blog/categories/event/atom.xml" rel="self"/>
  <link href="http://satococoa.github.io/"/>
  <updated>2013-06-22T16:06:02+09:00</updated>
  <id>http://satococoa.github.io/</id>
  <author>
    <name><![CDATA[Satoshi Ebisawa]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyMotion Conference #inspect 2013]]></title>
    <link href="http://satococoa.github.io/blog/2013/04/20/rubymotion-conference-number-inspect-2013/"/>
    <updated>2013-04-20T14:00:00+09:00</updated>
    <id>http://satococoa.github.io/blog/2013/04/20/rubymotion-conference-number-inspect-2013</id>
    <content type="html"><![CDATA[<p>3/28, 29 にベルギーのブリュッセルで開催された <a href="http://www.rubymotion.com/conference/">RubyMotion Conference #inspect 2013</a> に参加しました。</p>

<p>英語力にだいぶ不安がある中、頑張って聴き取ってきた内容をメモしたいと思います。</p>

<h3>1 日目</h3>

<h4>A Brave New World: Learning iOS for the Ruby Refugee &ndash; Nick Quaranto さん</h4>

<p>37signals で働く Nick さんがいかにして RubyMotion で Basecamp for iPhone を作って、どういうことを感じたのか、というお話でした。</p>

<p>Nick さんにとっては Objective-C で開発するということは Xcode というツールを強制されることが苦痛であり、自分の好きなツールを使って自由に開発ができる RubyMotion 無くして Basecamp for iPhone は作れなかっただろう、と話していました。<br/>
Interface Builder を見たときに、まるで Visual Basic を思い出すようだったというところで笑いを取っていました。</p>

<p>また、有用な gem や community のリソースの紹介もされました。</p>

<h5>Community</h5>

<ul>
<li><a href="https://groups.google.com/forum/?fromgroups#!forum/rubymotion">Google Group</a></li>
<li><a href="https://github.com/rubymotion">https://github.com/rubymotion</a></li>
<li><a href="http://www.rubymotion.com/developer-center/api/">http://www.rubymotion.com/developer-center/api/</a></li>
<li><a href="https://github.com/HipByte/RubyMotion-Samples">https://github.com/HipByte/RubyMotion-Samples</a></li>
</ul>


<h5>Gem</h5>

<ul>
<li><a href="http://bubblewrap.io">bubble-wrap</a>, ほとんど全てのプロジェクトで使っている Cocoa Touch の wrapper</li>
<li><a href="https://github.com/qrush/motion-settings-bundle">motion-settings-bundle</a>, 設定 app 用の bundle を作る gem</li>
<li><a href="https://github.com/qrush/motion-layout">motion-layout</a>, iOS 6.0 から使える auto-layout の gem</li>
<li><a href="http://cocoapods.org">CocoaPods</a> (motion-cocoapods)</li>
</ul>


<p>ちなみに質疑応答で「テストは書いているか？」という質問がされ、Basecamp アプリはテストを書いていないそうです。<br/>
その後、「テストを書いていますか？」 &ndash;> 「書いてないです」というやりとりはほぼ全部の発表後に様式美的に繰り返されることになります。 (1日目後半からは「ノベルティの T シャツはあるのか？」という質問も決まり文句として繰り返されて、笑いを誘っていました。)</p>

<p>RubyMotion でテストを書くときに参考にすべき良いアプリとして、<a href="https://github.com/tkadauke/TinyMon">TinyMon</a> というアプリが挙げられました。</p>

<h4>Behaviour Driven Motion using Calabash &ndash; Karl Krukow さん</h4>

<p><a href="http://calaba.sh">Carabash</a> というテスティングフレームワークのお話とデモでした。</p>

<p>会場にその場で挙手を求めてアンケートをとったところ、約 30% の人が RubyMotion のプロジェクトではユニットテストを書いていて、Acceptance Test を書いている人はたったの 2 人でした。</p>

<p>Carabash は Cucumber を利用して受け入れテストを記述するフレームワークで、マルチプラットフォームであることも特徴です。</p>

<p>また、client-server の構成を取っていて、リモートでテストを実行することも可能です。実際にリモートの実機で動作している様子も映像で見せてもらいました。</p>

<p>デモで動かしていたテストのリポジトリは以下です。(RubyMotion-Samples にある Beer アプリに対して受け入れテストを実行しました。)
<a href="https://github.com/krukow/motion-calabash-inspect2013">https://github.com/krukow/motion-calabash-inspect2013</a></p>

<h4>Controlling the Real World with RubyMotion &ndash; Rich Kilmer さん</h4>

<p>bluetooth のお話でした。</p>

<p>bluetooth の出始めの頃のお話から最近の bluetooth4 の仕様の話という歴史をおさらいするところから始まって、Apple 公式のドキュメントには全く記載のない (でもなぜかサンプルコードは配布されている) bluetooth を使って iPhone をサーバとして周囲の機器をスキャンし、その値を受け取ることもできるそうです。</p>

<p>これも実際にデモをされていました。</p>

<h4>Elevate your Intent &ndash; Matt Green さん</h4>

<p>ソフトウェアの設計のお話でした。(RubyMotion に特化した訳ではなく、一般的な概念)</p>

<p>責任の所在をドメインに応じて適宜分散し、小さくてシンプルなクラスを定義することで意図を明確に伝えるソースコードが書けるというお話でした。</p>

<p>Dependencies (依存関係) は複雑さを生み、バグを生み出すので、それをドメインに合うように分離することが大事と説いていました。</p>

<p>結局、依存は厄介なものであって、特に MVC の境界 (サービス層にあたるようなもの) はその依存関係が発生してしまうのでしいですが、それをうまく切り分けてシンプルにし、ドメインに基づいた名前を与え、エラー時には派手にエラーを挙げる (fail loudly) というのがうまく設計するポイントだと話していました。</p>

<p>また、それを支援するライブラリとして <a href="https://github.com/mattgreen/elevate">Elevate</a> という gem を作って公開されました。</p>

<p>スライド: <a href="https://speakerdeck.com/mattgreen/elevate-your-intent">Elevate Your Intent</a></p>

<h4>Accessibility and RubyMotion &ndash; Austin Seraphin</h4>

<p>アクセシビリティについての話でした。</p>

<p>生まれつきの全盲である Austin さんの生活がいかにして iPhone の登場によって快適になり、さらに RubyMotion のおかげでいかにソフトウェア開発が容易になったか、というお話をまずはされました。</p>

<p>『カメラを使って色を認識し、その色を音声で教えてくれるアプリを使ってみたけど、何にかざしても &ldquo;Black!&rdquo; としか認識されず、最初はアプリが壊れているのかと思ったら、実は夜で電気をつけていなかったために &ldquo;Black&rdquo; と認識されていたと気づき、電気をつけた』というエピソードが印象的でした。</p>

<p>Xcode の Interface Builder は全く全盲者にとってはアクセシビリティに乏しく、とても辛いものだそうです。しかし、自分の好きなツールを自由に選択でき、コードで開発ができる RubyMotion はそんな方にも可能性を与えるものとして素晴らしいとのことでした。</p>

<p>その話の後は、実際に開発者はどんな所に気をつけて開発すればいいのか、というところを具体的にレクチャーして頂きました。</p>

<p>スライド: <a href="http://www.slideshare.net/AdrianoMartino/ruby-motion-andiosaccessibility">RUBY MOTION &amp; ACCESSIBILITY</a></p>

<h4>Core Data For The Curious Rubyist &ndash; Jonathan Penn さん</h4>

<p>資料 (PDF): <a href="http://cocoamanifest.net/features/2013-03-core-data-in-motion.pdf">Core Data For The Curious Rubyist</a></p>

<p>Core Data についてのお話でした。</p>

<p>「Core Data は SQLite の ORM ではなくオブジェクトグラフである」という話から始まり、Core Data を使う上で理解する必要のある以下の 5 つの概念についての説明がありました。</p>

<ul>
<li>Context (NSManagedObjectContext)</li>
<li>Object (NSManagedObject)</li>
<li>Model (NSManagedObejctModel)</li>
<li>StoreCoordinator (NSPersistentStoreCoordinator)</li>
<li>FetchedResultsController (NSFetchedResultsController)</li>
</ul>


<p>特に非同期処理周りはややこしそうですね。。。iOS 5 以上からは <code>parentContext</code> というプロパティができてやりやすくはなったらしいですが。</p>

<p>Core Data のモデルファイルをコードから生成できる <a href="http://fousa.github.io/motion_migrate/">Motion Migrate</a> という gem も紹介されました。</p>

<p>あとは RubyMotion 用の Core Data のラッパーとして以下の2つの gem が挙げられました。</p>

<ul>
<li><a href="https://github.com/alloy/MotionData">MotionData</a></li>
<li><a href="https://github.com/awdogsgo2heaven/superbox">superbox</a></li>
</ul>


<h4>The Life and Times of an Object &ndash; Josh Ballanco さん</h4>

<p>gdb を使った RubyMotion のデバッグの仕方の紹介とデモでした。</p>

<p>RubyMotion では以下のコマンドで dbg が起動します。</p>

<p><code>$ rake debug=1</code></p>

<p>また、gdb 上で bt(backtrace), b(breakpoint), p(print), pro(print-ruby-object), x(x/4w と打っていた) などを使って実際のデバッグ風景を見せてくれました。</p>

<p>僕が一番驚いたのは、<code>p (char *)class_getName(&lt;address&gt;)</code> のようにして Objective-C Runtime の関数が呼べることや、<code>(char *)[[$1 keys] inspect]</code> のようにして Ruby のメソッドも呼べてしまうことでした。Ruby 処理系が Objective-C Runtime 上で実装されているおかげなんですね。</p>

<p>最後に <code>MallocStackLoggingNoCompat=YES rake debug=1</code> でデバッガを起動した後で <code>malloc_history</code> を使ってメモリの確保 / 解放の履歴を見る方法の説明がありました。</p>

<h4>Concurrency in RubyMotion: Use the Multicore Luke! &ndash; Mateus Armando さん</h4>

<p>GCD, NSOperationQueue を使った非同期処理についてのお話でした。</p>

<p>GCD, NSOperationQueue の使い方についての全般的な説明、GCD / NSOperationQueue の比較もありました。</p>

<p><a href="http://seanlilmateus.github.io">Mateus さんのブログ</a>には他にも GCD 関連のわかりやすい記事が掲載されています。</p>

<p>スライド: <a href="https://speakerdeck.com/seanlilmateus/concurrency-patterns-in-rubymotion">CONCURRENCY PATTERNS IN RUBYMOTION</a></p>

<h4>Get More From RubyMotion with RubyMine &ndash; Dennis Ushakov さん</h4>

<p>RubyMine での開発、デバッグなどのデモでした。</p>

<p>デバッグ用途だけで RubyMine を使うというのも割とありな気がします。</p>

<h4>Crafting iOS Dev Tools in Redcar &ndash; Delisa Mason さん</h4>

<p>Ruby で実装された <a href="http://redcareditor.com">Redcar</a> というエディタの紹介でした。</p>

<p>実際に HTML でプラグインを書くライブコーディングによるデモと、エディタ上でドキュメントを見られたり、デバッグができると言った特徴の説明がありました。</p>

<p>スライド: <a href="https://speakerdeck.com/kattrali/crafting-ios-dev-tools-in-redcar-the-ruby-editor">Crafting iOS Dev Tools in Redcar, the Ruby Editor</a></p>

<p>以上で 1 日目が終わり、その日の夜は @watson1978 さんとムール貝食べてきました。</p>

<p><img src="/images/201304/dinner.jpg"></p>

<h3>2 日目</h3>

<h4>NSRevolution: How Ruby hackers built the new Objective-C Open Source community &ndash; Mattt Thompson さん</h4>

<p>Ruby, Objective-C 双方の歴史などを振り返るところから話が始まりました。</p>

<p>Ruby は Smalltalk, perl, eiffel, lisp から強く影響を受けていて、ObjC は Smalltalk, C から影響を (C は影響というよりは、親みたいなものですが) 受けていて、双方ともメッセージパッシングについては Smalltalk の影響が大きいといった感じです。</p>

<p>そして Ruby の影響で Objective-C での開発フローやツールも変わってきているという話に移り、以下のライブラリやツールの紹介がありました。</p>

<h5><a href="http://cocoapods.org">CocoaPods</a></h5>

<p>Bundler for Objective-C</p>

<h5><a href="https://github.com/ReactiveCocoa/ReactiveCocoa">ReactiveCocoa</a></h5>

<p>Functional Reactive Programming Framework</p>

<h5><a href="https://github.com/tombenner/nui">NUI</a></h5>

<p>Stylesheets for iOS</p>

<h5><a href="https://github.com/square/KIF">KIF</a></h5>

<p>Testing framework</p>

<h5><a href="https://github.com/moredip/Frank">Frank</a></h5>

<p>Cucumber for iOS</p>

<h5><a href="https://github.com/mattt/cupertino">Cupertino</a></h5>

<p>CLI for Apple Developer
<a href="https://github.com/mattt/shenzhen">Shenzhen</a>, <a href="https://github.com/mattt/houston">Houston</a>, <a href="https://github.com/mattt/venice">Venice</a>, <a href="https://github.com/mattt/dubai">Dubai</a></p>

<h4>More Than You Need to Know About CocoaPods &ndash; Eloy Duran さん</h4>

<p>CocoaPods についての説明と、今後の展開についてのお話でした。</p>

<p>例えば <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> を使おうとした場合、通常は Xcode であちこちをいじらないといけないところ、CocoaPods を使えばとても簡単に使えるというのを実際に動画であらかじめ撮影したデモを見せてもらい、CocoaPods 無しのライブラリのインストールのあまりの煩雑さに会場は大ウケでした。</p>

<p>CocoaPods の .podspec ファイルの運用については、従来は GitHub の Pull Request ベースで人力で運用していたところを、GitHub API と TravisCI API を使って、自動的に Pull Request を出してマージするサーバを作るようにする、というお話がありました。</p>

<p>また、CocoaPods でインストールできるライブラリのドキュメントを集約する <a href="http://cocoadocs.org">CocoaDocs</a> というサイトができました。(Ruby で言うところの <a href="http://rubydoc.info">RubyDoc.info</a> ですね。</p>

<h4>Wrapping iOS in RubyMotion &ndash; Clay Allsopp さん</h4>

<p>RubyMotion でより Ruby らしくアプリケーションを作るためのラッパーを作るコツのお話でした。</p>

<p>例えば delegate の代わりに callback を使うという例で以下のコードが挙げられていました。</p>

<p>```</p>

<h1>CoreLocation delegate</h1>

<p>Location.get do |location|
  p location[:to]
end
```</p>

<p><code>Location.get</code> メソッドはブロックをインスタンス変数に入れて保持し、delegate を <code>self</code> として delegate メソッド内でそのブロックを <code>call</code> しているといった具合です。</p>

<p>また、ブロックを書くときも <code>-&gt;(arg1, arg2) {}</code> の記法を使ったり、成功時と失敗時に別々のブロックを渡すような ObjC のメソッドをラップするときには Ruby では一つのブロックを渡すようにしてブロック中で <code>if request.success?</code> みたいにして分岐する方が Ruby らしくなる、という話もありました。</p>

<p>あとは定数や ENUM は Symbol で指定できるようにすると使いやすいね、とか camelCase は snake_case に、演算子のオーバーロード、メタプログラミングなどの話もありましたのでスライドを参照してください。</p>

<p>スライド: <a href="https://speakerdeck.com/clayallsopp/wrapping-ios-with-rubymotion">Wrapping iOS with RubyMotion</a></p>

<h4>Goodbye IB, Hello Teacup &ndash; Colin Gray さん</h4>

<p>まずは <a href="https://github.com/rubymotion/teacup">teacup</a> gem の紹介でした。</p>

<p>Layout と Style というオブジェクトを使ってロジックと見た目を切り離して書くことができます。</p>

<p>また、<a href="https://github.com/colinta/sweettea">sweettea</a> も使うことで、Style をより CSS っぽく書くことも可能になります。</p>

<p>この場で実機で UI を Firebug や Chrome の開発者ツールのようにデバッグができる Kiln (今は名前が変わって <a href="https://github.com/colinta/motion-xray">motion-xray</a> になっています) という gem の発表がありました。</p>

<h4>Using BubbleWrap to Quickly Build RubyMotion Apps &ndash; Marin Usalj さん</h4>

<p><a href="http://bubblewrap.io">BubbleWrap</a> の各モジュールの紹介と簡単な使い方のお話でした。</p>

<h4>Mixing CoffeeScript in RubyMotion apps &ndash; Michael Erasmus さん</h4>

<p>cross platform の開発のために Web と Native のハイブリッドアプリを作っていて、Web の部分では CoffeeScript を使っているよ、という内容でした。</p>

<p>まだ試しているだけの段階で深いところまではやっていないけれども、ロジックを Web の中の CoffeeScript で書くことで各プラットフォームで再利用できるようにしたい、という狙いだそうです。</p>

<p>Native と CoffeeScript (JavaScript) とのやりとりは iframe を使っているそうです。</p>

<h4>Building Interactive Data Visualization Charts &ndash; Amit Kumar さん</h4>

<p>Data visualization ということで、いくつかのグラフを描画するライブラリについての紹介の後、ご自身で作られた gem の紹介でした。</p>

<h5>UIWebView を使うもの</h5>

<ul>
<li><a href="http://www.highcharts.com">Highcharts JS</a></li>
</ul>


<h5>Native</h5>

<ul>
<li>Shinobi (有償)</li>
<li>iOS:Charts (有償)</li>
<li>CorePlot</li>
</ul>


<p>このうち、Native かつ Open Source の CorePlot のラッパーが <a href="https://github.com/toamitkumar/motion-plot">motion-plot</a> です。</p>

<p>スライド: <a href="https://speakerdeck.com/toamitkumar/rubymotion-building-interactive-data-visualization-charts">RubyMotion &ndash; Building Interactive Data Visualization Charts</a></p>

<h4>Cocos2D, an Easier Way &ndash; Juan Karam さん</h4>

<p>ゲーム開発用のフレームワークである Cocos2D と、それとよく組み合わせて使われる物理演算エンジンの Box2D についてのお話でした。</p>

<p>Box2D は C++ で書かれているためにそのままでは RubyMotion から扱うことが出来ず、Objective-C でラッパーを書いてあげる必要があります。</p>

<p>そのあたりに手をつけ、RubyMotion から扱いやすくした gem がこの場で発表された <a href="https://github.com/rubymotion/Joybox">Joybox</a> です。</p>

<p>ライブコーディングであっという間にゲームを作っていた様子が圧巻でした。</p>

<p>まだまだ未実装だったり、ドキュメントが全然なかったりするので協力者を募集しています。</p>

<h4>Let&rsquo;s Move with CoreMotion &ndash; Akshat Paul さん、Abhishek Nalwaya さん</h4>

<p>正直、内容をあんまり覚えていません。</p>

<p>iPhone の Prezi アプリでプレゼンをしていたのですが、途中で Push 通知が来たり、電話がかかってきたりして爆笑した記憶が強く。。。</p>

<p>iOS での加速度センサやジャイロスコープの扱いの話でした。</p>

<h4>RubyMotion: Past, Present and Future &ndash; Laurent Sansonetti さん</h4>

<p>Laurent さんのこれまでの半生と、今後の RubyMotion のロードマップについての発表がありました。</p>

<h5>ロードマップ</h5>

<ul>
<li>Toolchain improvements</li>
<li>Code generators</li>
<li>Profiler (CPU, Memory)</li>
<li>Code reloading (REPL)</li>
<li>Static code analysis</li>
<li>Tutorials</li>
<li>Enterprise support</li>
<li>More platforms</li>
</ul>


<p>この中では、やはり More platforms が気になりますね。(BlackBerry ではないそうです/笑)</p>

<p>あとは Code reloading が便利そう。ちょっとした View の変更とかが再ビルドしなくても確認できるとなるとなかなか嬉しいですね。</p>

<p>次回のカンファレンス、#inspect 2014 は NewYork city か Mexico あたりで開催される予定らしいです。</p>

<h3>まとめ</h3>

<p>暗い場所だったのでだいぶブレましたが、アフターパーティで Laurent さんと撮りました。</p>

<p><img src="/images/201304/laurent.jpg"></p>

<p>英語力の不足をひしひしと感じる中、なんとか発表の内容を理解しようと必死の2日間でした。なかなか参加者の方とコミュニケーションを取ることも大変だったのですが、最終日のアフターパーティではお酒の勢いを借りて色んな人とお話しできてよかったです。</p>

<p>日本でも 5/29 に <a href="http://connpass.com/event/2095/">RubyMotion Kaigi 2013</a> というイベントを予定していて、Laurent さんにもしゃべってもらう予定です。</p>

<p>15 年以上ぶりの海外で色々戸惑うところも多かったですが、記念すべき初めてのカンファレンスに参加できてとてもよかったです。</p>

<p>あわせて読みたい: <a href="http://watson1978.github.io/blog/2013/03/31/rubymotion-conference-2013/">RubyMotion Conference 2013 &ndash; Watson&rsquo;s Blog</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Girls Tokyo 2nd に参加しました]]></title>
    <link href="http://satococoa.github.io/blog/2013/03/03/rails-girls-tokyo-2nd/"/>
    <updated>2013-03-03T12:53:00+09:00</updated>
    <id>http://satococoa.github.io/blog/2013/03/03/rails-girls-tokyo-2nd</id>
    <content type="html"><![CDATA[<p>LT枠だけでの参加でしたが、<a href="http://railsgirls.com/tokyo">Rails Girls Tokyo 2nd</a> に混ぜてもらいました！</p>

<p>参加者の方が継続的に勉強を進められるコミュニティのご紹介として <a href="http://prog4designer.github.com/">#p4d</a> の宣伝をさせていただきました。</p>

<p>発表資料置いておきます。(<a href="https://speakerdeck.com/satococoa/p4d-rails-girls-tokyo-2nd">スライドのページ</a> にある Download PDF のリンクから PDF をダウンロードすればリンクも動作します。)</p>

<script async class="speakerdeck-embed" data-id="b3a93dc064cc013060a912313916f057" data-ratio="1.2994923857868" src="http://satococoa.github.io//speakerdeck.com/assets/embed.js"></script>


<h2>【私撰】次のステップとしておすすめの Ruby コミュニティ【おまけ】</h2>

<p>個人的に僕がよく顔を出すコミュニティのうち、Rails Girls の参加者にお勧めできるコミュニティを挙げてみます。</p>

<p>昨日の帰り際に <a href="https://twitter.com/yotii23">@yotii23</a> さんともお話したのですが、まずは今回のコーチのいるコミュニティ（のコーチがちょうど参加している回）に行ってみるとすんなりとけ込めるのでは。と思います。</p>

<p>コメントは全て僕の主観ですのでご注意を。</p>

<hr />

<h3>RailsGirls, More</h3>

<p>公式なので、間違いなくここがおすすめ。参加方法はFBグループかメールで参加者の方に届くそうです。</p>

<p>お問い合わせ先は <a href="https://twitter.com/yotii23">@yotii23</a> さんか <a href="https://twitter.com/publichtml">@publichtml</a> さんでいいのかな？</p>

<hr />

<h3><a href="http://prog4designer.github.com/">P4D デザイナー向けプログラム部</a></h3>

<p>LT させてもらったので概要は省略。</p>

<h4>会える人</h4>

<ul>
<li><a href="http://twitter.com/machida">@machida</a> さん<br/>
<a href="http://fjord.jp">fjord</a> のデザイナさん。<a href="http://kuroigamen.com">KUROIGAMEN</a> の人。</li>
<li><a href="http://twitter.com/ken_c_lo">@ken_c_lo</a> さん<br/>
フリーのデザイナさん。<a href="https://speakerdeck.com/ken_c_lo/zurui-design">ズルいデザイン</a> の人。</li>
<li><a href="https://twitter.com/shu_0115">@shu_0115</a> さん<br/>
フリーの Rails エンジニア。<a href="http://rails4beginners.github.com/home/">Rails for Beginners</a> 主催の人。</li>
<li><a href="http://twitter.com/satococoa">@satococoa</a><br/>
僕ですね。最近は<a href="http://rubymotion.jp">RubyMotion JP</a> の人。</li>
</ul>


<hr />

<h3><a href="https://ishikitakai.com/groups/1">Sendagaya.rb</a></h3>

<p>毎週月曜日に meetup を開催している Ruby コミュニティです。今は新宿で毎週やっているのでアクセスの良さもポイント！</p>

<p>僕がいるときに来てもらえれば普通に Rails も教えたりできます。</p>

<p>紹介スライド &ndash;> <a href="http://decknotes.com/slides/17">ボクが東京に来て作ったモノ</a> by @fukajun</p>

<h4>会える人</h4>

<ul>
<li><a href="http://twitter.com/fukajun">@fukajun</a> さん<br/>
Rails エンジニア。<a href="http://decknotes.com/">DeckNotes</a> 作った人。</li>
<li><a href="http://twitter.com/ppworks">@ppworks</a> さん<br/>
Rails エンジニア。<a href="http://welove.herokuapp.com">we love heroku</a> 作った人。</li>
<li><a href="https://twitter.com/tkawa">@tkawa</a> さん<br/>
Rails エンジニア。REST の人。</li>
</ul>


<hr />

<h3><a href="http://bukt.org/groups/3">Yokohama.rb</a></h3>

<p>毎月第2土曜日あたりに横浜駅の一つ東京側の東神奈川駅から徒歩10分ほどの場所で開催しています。</p>

<p>東京から参加している人も多く、僕も1時間ちょいかけて通っています。</p>

<p>土曜日開催 &amp; Ruby レシピブック読書会などもあり、Ruby ビギナーにもとても参加しやすい雰囲気がポイントです。</p>

<h4>会える人</h4>

<ul>
<li><a href="https://twitter.com/1syo">@1syo</a> さん  <br/>
Rails エンジニア。<a href="http://regional.rubykaigi.org/minato01">みなとRuby会議01</a> 実行委員長。</li>
<li><a href="https://twitter.com/hamakn">@hamakn</a> さん<br/>
Rails エンジニア。<a href="http://d.hatena.ne.jp/hamakn/20130217">デブサミで発表</a> されてました。</li>
</ul>


<hr />

<p>それぞれのコミュニティですごい人がたくさんいるのですが、失礼ながらとりあえずパッと頭に浮かんだ人だけ書かせていただきました。</p>

<p>では、またどこかのコミュニティでお会いしましょう！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第4回 Rails Girls, More 勉強会]]></title>
    <link href="http://satococoa.github.io/blog/2013/02/17/rails-girls-more-4th/"/>
    <updated>2013-02-17T12:58:00+09:00</updated>
    <id>http://satococoa.github.io/blog/2013/02/17/rails-girls-more-4th</id>
    <content type="html"><![CDATA[<p>2/16(土) に万葉さんで開催された第4回 Rails Girls, More 勉強会に僭越ながらコーチ役として参加させていただきました。</p>

<p>勉強会のスタイルは、最初に参加者の方々に今日やりたいことを聞いて、それに合わせてコーチを割り当てて進めていくというなかなか贅沢なスタイル。</p>

<p>この日は参加者のみなさんの進捗が比較的揃っていて、controller, view を経て model へと進む方が多かったです。</p>

<p>コーチ役とはいえ、僕も初参加で何からどう教えていいかよくわかっていませんでしたが、そこは <a href="https://twitter.com/igaiga555">@igaiga555</a> 先生の作られたしっかりした資料があったおかげで特に困ることもなく進めることが出来ました。</p>

<h2>資料から脱線した部分</h2>

<p>資料にある部分は参加者の方もあとでそちらを見直せばいいと思うので、資料にはなく、僕が脱線して話したことについて少しメモします。</p>

<h3><a href="http://www.sublimetext.com">Sublime Text 2</a></h3>

<p>今使っているエディタが使いにくい、という方がいらっしゃったので、Sublime Text 2 をダウンロードしてもらいました。Windows版もあって素敵。</p>

<p>今とても人気のあるエディタの一つで、vim や emacs よりはとっつきやすいエディタですので、エディタ選びに迷っている方は一度使ってみて下さい。有料ですが、お試し期間でも機能制限無し、お試し期間の期限もなし、という太っ腹なエディタです。（気に入ったら買うといいと思います。）</p>

<h3>GitHub の使い方</h3>

<p>お仕事で GitHub に触れる方もいらっしゃったので、リポジトリの作り方を一通りお見せしました。</p>

<p>「Git, GitHub の勉強会もやれるといいよねー」と、勉強会後に夕食を食べながらコーチ陣で話をしていましたので、そのうちやれるかも？</p>

<h3><code>schema_migrations</code></h3>

<p>たまたま僕が担当させていただいたお二人が SQL をご存知の方だったので、DB に <code>schema_migrations</code> というテーブルができていて、そこに適用済みの migration が記録されているおかげで、適切に <code>rake db:migrate</code>, <code>rake db:rollback</code> できるんですねー、といったお話をしました。</p>

<h3>RailsGuides</h3>

<p>RailsGuides の中でも、<a href="http://guides.rubyonrails.org/active_record_querying.html">Active Record Query Interface</a> のページを紹介し、コンソール上で <code>order</code> メソッドや <code>where</code> メソッドで遊んでみていただきました。</p>

<p>あと、<a href="http://guides.rubyonrails.org/getting_started.html">Getting Started with Rails</a> のページを上から順にざっと、「このセクションにはこんな内容が書いてあって&hellip;」といったレベルで説明させていただきました。今後自学自習される場合に、チュートリアルとしてすごくいい題材だと思ったので。</p>

<h2>まとめ</h2>

<p>初参加だったのでむしろ自分の方が緊張していましたが、とても和やかな雰囲気で楽しく参加させていただきました。</p>

<p>今後も Validation, Relation, テスト, Git など色々盛りだくさんの内容でやっていくようですので、またお手伝いさせていただければ、と思います。</p>

<p>RubyMotion もいつでも教えますよ！</p>

<h2>宣伝</h2>

<p>RailsGirls を入り口として色んな勉強会へ参加されるようになると、継続的に学習できていいのではと思います。</p>

<p>ということで自分の主催するコミュニティを宣伝して終わります。</p>

<h3>P4D(デザイナー向けプログラム部)</h3>

<p>僕が主催させていただいているコミュニティで、プログラムもやりたいデザイナさんにプログラムを教えよう、という会です。</p>

<p>最近は嬉しいことにプログラマがデザインを教えていただく逆パターンもよく見るようになってきて、プログラムについてもデザインについても気軽に相談できるコミュニティになりつつあります。</p>

<p>デザイナさんが恒常的に少なめなので、ぜひお気軽にご参加ください。</p>

<p>主に facebook グループ の <a href="https://www.facebook.com/groups/151208708350141/">P4D デザイナー向けプログラム部</a> でやりとりしてます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[東京 Ruby 会議 10 3日目に参加しました]]></title>
    <link href="http://satococoa.github.io/blog/2013/02/11/tkrk10-3rd-day/"/>
    <updated>2013-02-11T01:36:00+09:00</updated>
    <id>http://satococoa.github.io/blog/2013/02/11/tkrk10-3rd-day</id>
    <content type="html"><![CDATA[<p>先日の東京 Ruby 会議 10 では大雪のため幻のスピーカーになってしまったのですが、今日はちゃんと発表してきました。</p>

<h2>発表内容</h2>

<script async class="speakerdeck-embed" data-id="e091e8f055ce0130b56f12313815634b" data-ratio="1.2994923857868" src="http://satococoa.github.io//speakerdeck.com/assets/embed.js"></script>


<h3>RubyFriendsCamera の宣伝</h3>

<p>気軽に #RubyFriends するためのアプリを #p4d のメンバーと一緒に作っています。2/23 の Ruby 20周年パーティに間に合うように AppStore でリリースしたいと思っています。</p>

<h3>ライブコーディング</h3>

<p>rails で scaffold したサーバサイドのデータを CRUD するクライアントアプリを RubyMotion で作りました。</p>

<p>本当はデータの作成 / 更新 / 削除も実装したいと思って、実際に一度最後まで作ってみたりはしていたのですが、さすがに全然たどり着かなかったです。</p>

<p>完成例のコードも公開してありますので参考にしていただければ幸いです。今日は見せられなかった Formotion gem を使った更新フォームも作ってあります。
（実はグダグダになったとき用に完成版も clone して手元に持っていたのです。）</p>

<ul>
<li><a href="https://github.com/satococoa/tkrk10_server">サーバ側</a></li>
<li><a href="https://github.com/satococoa/tkrk10_client">クライアント側</a></li>
</ul>


<p>もしこの発表で RubyMotion に興味を持ってくださった方がいらっしゃれば、ぜひお気軽に <a href="http://connpass.com/event/1745/">RubyMotion もくもく会</a> に遊びに来ていただけると幸いです。</p>

<h2>まとめ</h2>

<p>スタッフのみなさんはこの短い期間で 3日目の開催となって、準備とか色々大変だったと思います。貴重な発表の機会を頂けてとても感謝しています。</p>

<p>今日発表された他の方の話も、コミュニティの話あり、技術の話あり、スピリチュアルな話あり、とバランスがとれていてとても参考になる話ばかりでしたね。
（Ember.jsもさることながら、あのチャットシステムが気になる！）</p>

<p>参加者の皆様含めて、本当にありがとうございました。今後ともよろしくお願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Qiita 2-day Hackathon]]></title>
    <link href="http://satococoa.github.io/blog/2013/02/05/qiita-2-day-hackathon/"/>
    <updated>2013-02-05T02:21:00+09:00</updated>
    <id>http://satococoa.github.io/blog/2013/02/05/qiita-2-day-hackathon</id>
    <content type="html"><![CDATA[<p><a href="http://qiitahackathon03.peatix.com">Qiita 2-day Hackathon</a> に参加しました。</p>

<p>このイベントは<a href="http://developer.github.com">GitHub API</a>を使って何らかのアプリケーションを開発しよう！というハッカソンです。</p>

<p>詳しいテーマは当日発表され、「プログラマの問題を解決するサービス」とのことでした。</p>

<p>当日の様子は公式のブログを見ていただくのがいいかなと思います。</p>

<p><a href="http://blog.qiita.com/post/42345394076/qiita-2-day-hackathon-report">スペシャルゲストも登場して盛り上がったQiita 2-day Hackathon総まとめ！</a></p>

<h2>僕の作ったもの</h2>

<p>全くアイディアを持たずに参加したので、一日目は GitHub API を一通り眺めてターミナルから<code>curl</code>や <a href="https://github.com/nahi/httpclient">httpclient</a> で叩いてみただけでほとんど終わっちゃいました。</p>

<p>全体的に GitHub API で何が出来るのかを把握できた後で、残り半日くらいで出来そうなものを考えたところ、自分の GitHub のプロフィールページを簡単に表示できて、 QR コードでシェアできるものならばデモまでもっていけそうかな、ということで作ってみました。</p>

<p>リポジトリはこちらです。（READMEも何もなくてちょっと不親切ですが。）</p>

<ul>
<li><a href="https://github.com/satococoa/GHProfiles">satococoa/GHProfiles</a></li>
</ul>


<p>RubyMotion + Pixate です。せっかくここまで作ったので、Twitter、Facebook、GitHubのプロフィールを表示・共有できるアプリに仕上げて無料で公開したいなぁと思っています。</p>

<h2>まとめ</h2>

<p>GitHub API を使うという点、そして2日間という制限の中で各チーム結構アイディアがかぶったりしたのですが、その中でも「おっ」と思うアプリをつくったチームは本当にすごいなぁと思いました。</p>

<p>特に僕と同じようにプロフィールを交換できるアプリを作ったチームのうち、音でデータのやりとりを実装されたチームがいて、その発想は全くなかったので驚きました。</p>

<p>音とか光、使ってみたいなぁ。。。</p>

<p>とても刺激になりました。</p>
]]></content>
  </entry>
  
</feed>
